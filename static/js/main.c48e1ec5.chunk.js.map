{"version":3,"sources":["lib/context.js","lib/prime.js","logo.svg","components/table.js","App.js","serviceWorker.js","index.js"],"names":["Base","this","run","Error","JSContext","prime","Prime","console","log","generatePrimes","createTable","x","y","value","el","document","getElementById","innerText","primes","count","primeCount","GOContext","WebAssembly","global","Go","go","window","instantiateStreaming","fetch","importObject","then","result","instance","golangInflateTable","golangGetPrimes","counter","golangSetPrimeCount","exited","golangShutdown","exit","primeInstance","arrayList","current","Number","MAX_SAFE_INTEGER","primeChecker","number","push","length","obj","currentCount","squareRt","parseInt","Math","sqrt","callback","forEach","entry","_tableGenerator","index","i","module","exports","generateRow","Table","headers","className","map","v","key","id","ContextType","App","contextCache","JS","GO","state","engine","context","status","getPrimes","setState","type","existsInCache","old","saveToCache","stop","cached","getOldOrMakeNew","e","error","message","setContextType","toastManager","props","onChange","add","appearance","autoDismiss","target","onSubmit","a","async","preventDefault","stopPropagation","setPrimeCount","placeholder","onClick","startId","inflateTable","remove","Date","getFullYear","React","PureComponent","withToastManager","Boolean","location","hostname","match","resp","arrayBuffer","source","instantiate","ReactDOM","render","placement","navigator","serviceWorker","ready","registration","unregister"],"mappings":"qQAKMA,E,WAIF,aAAe,oBACXC,KAAKC,M,0HAOC,IAAIC,MAAM,wB,oJAIV,IAAIA,MAAM,wB,iJAIV,IAAIA,MAAM,wB,qJAIV,IAAIA,MAAM,wB,oEAIhB,MAAM,IAAIA,MAAM,4B,KAKXC,EAAb,2MACIC,MAAQ,IAAIC,IAAM,IADtB,uIAMQC,QAAQC,IAAI,sBANpB,8IAUQP,KAAKI,MAAMI,iBACXR,KAAKI,MAAMK,aAAY,SAACC,EAAGC,EAAGC,GAG1B,IAAMC,EAAKC,SAASC,eAAT,WAA4BL,EAA5B,YAAiCC,IACvCE,IACLA,EAAGG,UAAYJ,MAhB3B,6JAqBeZ,KAAKI,MAAMa,OArB1B,+CAqB0CjB,KAAKI,MAAMI,kBArBrD,8IAwBwBU,GAxBxB,yEAyBQlB,KAAKI,MAAMe,WAAaD,GAAS,EAAIA,EAAQ,EAzBrD,mBA0BqBlB,KAAKI,MAAMI,kBA1BhC,sHA8BQF,QAAQC,IAAI,2BA9BpB,GAA+BR,GAoDlBqB,EAAb,YAKI,aAAe,IAAD,EAKV,GALU,sBAKJC,aAAe,OAAQC,GAA+B,oBAAdA,EAAOC,IAKjD,MAAM,IAAIrB,MAAM,qCAVV,OAON,8CAPM,gBALlB,kJAqBaF,KAAKwB,GAINA,EAAKxB,KAAKwB,IAHVA,EAAK,IAAIC,OAAOF,GAChBvB,KAAKwB,GAAKA,GAvBtB,kBA4BeH,YAAYK,qBAAqBC,MAAM,aAAcH,EAAGI,cAAcC,MAAK,SAACC,GAC/EV,EAAUW,SAAWD,EAAOC,SAC5BP,EAAGvB,IAAImB,EAAUW,cA9B7B,iLAmCeN,OAAOO,sBAnCtB,oKAuCeV,EAAOW,mBAvCtB,2EA0CwBf,GA1CxB,+EA2CYgB,EAAUZ,EAAOa,oBAAoBjB,GACzCZ,QAAQC,IAAI2B,EAAS,UA5C7B,kBA6CeA,GA7Cf,oEAiDalC,KAAKwB,GAAGY,SACTd,EAAOe,iBACPjB,EAAUW,SAAW,KACrB/B,KAAKwB,GAAGc,KAAK,QApDzB,GAA+BvC,GAAlBqB,EAGFW,SAAW,O,2IC7FT1B,EAAb,WAII,WAAYa,GAAQ,yBAHpBC,WAAa,GAGM,KAFnBF,OAAS,KAGLjB,KAAKmB,WAAaD,EAMlBI,EAAOiB,cAAgBvC,KAX/B,2DAqByBkB,EAAOsB,EAAWC,GArB3C,qEAuBQD,EAAYA,GAAa,GACzBtB,EAAQA,GAASlB,KAAKmB,WACtBsB,EAAUA,GAAW,IACjBC,OAAOC,iBAAoBF,EAAU,GA1BjD,sBA0B2D,IAAIvC,MAAM,2BA1BrE,UA4BYF,KAAK4C,aAAa,CAAEC,OAAQJ,KAAYD,EAAUM,KAAKL,KAEvDD,EAAUO,OAAS7B,GA9B/B,0CA+BmBlB,KAAKQ,eAAeU,EAAOsB,IAAaC,IA/B3D,eAiCYzC,KAAKiB,OAASuB,EAjC1B,kBAkCmBA,GAlCnB,qFA6CiBQ,GACT,OAAIA,EAAIC,eACAD,EAAIC,cAAgBD,EAAIE,WACpBF,EAAIH,OAASG,EAAIC,eAAiB,GAAKD,EAAIH,QAAUG,EAAIC,aAAe,KAAO,IAE/ED,EAAIC,eACGjD,KAAK4C,aAAaI,IASjCA,EAAIH,QAAU,EAAUG,EAAIH,OAAS,EAChCG,EAAIH,OAAS,IAAM,GAAKG,EAAIH,OAAS,IAAM,IAEpDG,EAAIE,SAAWC,SAASC,KAAKC,KAAKL,EAAIH,SAKtCG,EAAIC,aAAe,EAEZjD,KAAK4C,aAAaI,MAtEjC,kCA+EsBM,EAAUrC,GA/EhC,kFAgFQjB,KAAKiB,OAASA,GAAUjB,KAAKiB,QAAUjB,KAAKQ,iBAEvCR,KAAKiB,QAAiC,kBAAhBjB,KAAKiB,OAlFxC,sBAmFkB,IAAIf,MAAM,sCAnF5B,cAsFY4B,EAAS,GACb9B,KAAKiB,OAAOsC,SAAQ,SAACC,EAAO7C,GACxBmB,EAAOgB,KAAP,YAAgB,EAAKW,gBAAgB9C,EAAG2C,QAxFpD,kBA0FexB,GA1Ff,mGAmGqB4B,EAAOJ,GAnG5B,4EAoGatD,KAAKiB,QAAiC,kBAAhBjB,KAAKiB,OApGxC,sBAqGkB,IAAIf,MAAM,sCArG5B,OAwGiByD,EAAI,EAxGrB,YAwGwBA,EAAI3D,KAAKiB,OAAO8B,QAxGxC,iBA2GY,OAFMjB,EAAS9B,KAAKiB,OAAOyC,GAAS1D,KAAKiB,OAAO0C,GAChDL,EAASK,EAAGD,EAAO5B,GA1G/B,SA2GkBA,EA3GlB,OAwGgD6B,IAxGhD,yE,8FCAAC,EAAOC,QAAU,IAA0B,kC,4LCwCjCC,GA9BGC,EAAQ,SAAC,GAA2B,IAAzBC,EAAwB,EAAxBA,QAAwB,EAAfV,SAG7B,OACI,yBAAKW,UAAU,SACX,+BACI,+BACI,4BAAI,iCACCD,EAAQE,KAAI,SAACC,EAAGzD,GACb,OACI,wBAAI0D,IAAG,eAAU1D,IAAMyD,QAKvC,+BACKH,EAAQE,KAAI,SAACC,EAAGxD,GACb,OACI,wBAAIyD,IAAG,eAAUzD,EAAV,YAAewD,IAClB,4BAAKA,GADT,YAESL,EAAYnD,EAAGqD,EAAQjB,iBAU5D,SAAUe,EAAYnD,EAAGO,GAAzB,uEACayC,EAAI,EADjB,YACoBA,EAAIzC,GADxB,gBAEQ,OAFR,SAGY,wBAAImD,GAAE,WAAMV,EAAN,YAAWhD,GAAKyD,IAAG,WAAMT,EAAN,YAAWhD,KAHhD,OAC+BgD,IAD/B,sD,oBCjCMW,EACS,EADTA,EAEQ,EAFRA,EAGO,EAWPC,E,2MAIJC,aAAe,CACbC,GAAI,KACJC,GAAI,M,EAGNC,MAAQ,CAENC,OAAQN,EACRO,QAAS,IAAI1E,IACbc,OAAQ,GACR6D,OAAQ,uL,iKAIR9E,K,mBAA8BA,KAAK2E,MAAME,QAAQE,a,yBAAjC9D,O,WAAX+D,S,qGAUOC,GACZ,OAAQA,GACN,KAAKX,EACH,GAAItE,KAAKwE,aAAaC,GAEpB,OADAzE,KAAKwE,aAAaC,GAAGxE,MACdD,KAAKwE,aAAaC,GAE3B,MACF,KAAKH,EACH,GAAItE,KAAKwE,aAAaE,GAEpB,OADA1E,KAAKwE,aAAaE,GAAGzE,MACdD,KAAKwE,aAAaE,GAE3B,MACF,QACE,OAAO,K,sCAIGO,GACd,OAAQA,GACN,KAAKX,EACH,OAAOtE,KAAKkF,cAAcZ,IAA2B,IAAInE,IAC3D,KAAKmE,EACH,OAAOtE,KAAKkF,cAAcZ,IAA4B,IAAIlD,IAC5D,KAAKkD,EACH,OAAOtE,KAAKkF,cAAcZ,GAE5B,QACE,MAAM,IAAIpE,MAAM,wD,qCAIP+E,GACb,IAAME,EAAM,CAAEF,KAAMjF,KAAK2E,MAAMC,OAAQC,QAAS7E,KAAK2E,MAAME,SACvDO,GAAc,EAMlB,OALID,EAAIF,OAASA,IACfG,GAAc,EACd9E,QAAQC,IAAI,4BAGN4E,EAAIF,MACV,KAAKX,EACHtE,KAAK2E,MAAME,QAAQQ,OACfD,IAAapF,KAAKwE,aAAaC,GAAKzE,KAAK2E,MAAME,SACnD,MACF,KAAKP,EACHtE,KAAK2E,MAAME,QAAQQ,OACfD,IAAapF,KAAKwE,aAAaE,GAAK1E,KAAK2E,MAAME,SACnD,MACF,KAAKP,EACH,MAAM,IAAIpE,MAAM,wBAClB,QACE,MAAM,IAAIA,MAAM,qDAGpB,IACE,IAAMoF,EAAStF,KAAKuF,gBAAgBN,GACpCjF,KAAKgF,SAAS,CAAEJ,OAAQK,EAAMJ,QAASS,IACvC,MAAOE,GACPlF,QAAQmF,MAAMD,GACdxF,KAAKgF,SAAS,CAAEF,OAAQU,EAAEE,UAE1B1F,KAAK2F,eAAeR,EAAIF,S,+BAKlB,IAAD,OACCW,EAAiB5F,KAAK6F,MAAtBD,aAGR,OACE,yBAAK3B,UAAU,OACb,gCACE,4BAAQA,UAAU,SAASrD,MAAOZ,KAAK2E,MAAMC,OAAQkB,SAAU,SAAAN,GAC7DI,EAAaG,IAAb,6BAA+C,CAC7CC,WAAY,OACZC,aAAa,IAEf,EAAKN,eAAexC,SAASqC,EAAEU,OAAOtF,UAEtC,4BAAQA,MAAO0D,GAAf,cACA,4BAAQ1D,MAAO0D,GAAf,gBAGF,0BAAML,UAAU,UAAUkC,SAAU,SAAMX,GAAN,SAAAY,EAAAC,OAAA,uDAClCb,EAAEc,iBACFd,EAAEe,kBAFgC,KAIlC,EAJkC,WAAAH,EAAA,MAIJ,EAAKzB,MAAME,QAAQ2B,cAAcrD,SAASrC,SAASC,eAAe,mBAAmBH,MAAO,MAJxF,yBAIlBK,OAJkB,WAIgG,kBAAM2E,EAAaG,IAAI,uBAAwB,CAC/KC,WAAY,UACZC,aAAa,KANmB,KAI7BjB,SAJ6B,4DASlC,2BAAOX,GAAG,kBAAkBY,KAAK,SAASwB,YAAY,gCAG1D,8BAEE,yBAAKxC,UAAU,mBACb,kBAAC,EAAD,CAAOD,QAAShE,KAAK2E,MAAM1D,QAAU,MAGvC,4BAAQgD,UAAU,SAASyC,QAAS,WAClC,IAAMC,EAAUf,EAAaG,IAAI,qBAAsB,CAAEC,WAAY,SACrE,EAAKrB,MAAME,QAAQ+B,eAAe/E,MAAK,WACrC+D,EAAaiB,OAAOF,GACpBf,EAAaG,IAAI,2BAA4B,CAAEC,WAAY,UAAWC,aAAa,SAJvF,iBAQA,6BACE,uBAAG5B,GAAG,UAAUrE,KAAK2E,MAAMG,UAG/B,iCAAS,6CAAqB,IAAIgC,MAAQC,qB,GAhJhCC,IAAMC,eAsJTC,6BAAiB3C,GC/JZ4C,QACW,cAA7B1F,OAAO2F,SAASC,UAEe,UAA7B5F,OAAO2F,SAASC,UAEhB5F,OAAO2F,SAASC,SAASC,MACvB,2DCVDjG,YAAYK,uBACbL,YAAYK,qBAAuB,SAAO6F,EAAM3F,GAAb,eAAAwE,EAAAC,OAAA,8DAAAD,EAAA,WAAAA,EAAA,MACHmB,GADG,0BACGC,cADH,kDACzBC,EADyB,kBAAArB,EAAA,MAElB/E,YAAYqG,YAAYD,EAAQ7F,IAFd,gFAOvC+F,IAASC,OAAO,kBAAC,gBAAD,CAAeC,UAAU,iBAAgB,kBAAC,EAAD,OAAyB/G,SAASC,eAAe,SDmHpG,kBAAmB+G,WACrBA,UAAUC,cAAcC,MAAMnG,MAAK,SAAAoG,GACjCA,EAAaC,kB","file":"static/js/main.c48e1ec5.chunk.js","sourcesContent":["import { Prime } from \"./prime\";\r\n\r\n/**\r\n * Base class for run contexts.\r\n */\r\nclass Base {\r\n    /**\r\n     * This confirms dependencies and checks if funtionality provided is supported.\r\n     */\r\n    constructor() {\r\n        this.run()\r\n    }\r\n    /**\r\n     * `run` contains the switch for triggering application context logic.\r\n     * Subclasses must implement this method.\r\n     */\r\n    async run() {\r\n        throw new Error(\"Not implemented yet!\")\r\n    }\r\n\r\n    async inflateTable() {\r\n        throw new Error(\"Not yet implemented!\")\r\n    }\r\n\r\n    async getPrimes() {\r\n        throw new Error(\"Not yet implemented!\")\r\n    }\r\n\r\n    async setPrimeCount() {\r\n        throw new Error(\"Not yet implemented!\")\r\n    }\r\n\r\n    stop() {\r\n        throw new Error(\"Not implemented yet!\")\r\n    }\r\n}\r\n\r\n\r\nexport class JSContext extends Base {\r\n    prime = new Prime(10)\r\n\r\n    // Apparently, this requires base JavaScript functionality.\r\n    // Should work fine across many browsers.\r\n    async run() {\r\n        console.log('JSContext running!')\r\n    }\r\n\r\n    async inflateTable() {\r\n        this.prime.generatePrimes()\r\n        this.prime.createTable((x, y, value) => {\r\n            // callback to inflate values to table.\r\n            // The table cells must already exist.\r\n            const el = document.getElementById(`x${x}y${y}`)\r\n            if (!el) return // silently continue\r\n            el.innerText = value\r\n        })\r\n    }\r\n\r\n    async getPrimes() {\r\n        return this.prime.primes || await this.prime.generatePrimes()\r\n    }\r\n\r\n    async setPrimeCount(count) {\r\n        this.prime.primeCount = count >= 1 ? count : 1\r\n        return await this.prime.generatePrimes()\r\n    }\r\n\r\n    stop() {\r\n        console.log(\"Stopped JS context!\")\r\n    }\r\n}\r\n\r\nexport class WorkerContext extends Base {\r\n    worker = null\r\n\r\n    constructor() {\r\n        // Confirm WebWorker support.\r\n        if (!(\"Worker\" in window) || typeof Worker !== \"function\") throw new Error(\"Cannot initialize WebWorker!\")\r\n    }\r\n\r\n    async run() {\r\n        const worker = new Worker(`${process.env.PUBLIC_URL}/worker.js`)\r\n        // worker.\r\n    }\r\n\r\n    stop() {\r\n        this.worker.terminate()\r\n    }\r\n}\r\n\r\nexport class GOContext extends Base {\r\n    // Local variable for storing WASM instance.\r\n    go\r\n    static instance = null\r\n\r\n    constructor() {\r\n        // Confirm WASM dependency.\r\n        //\r\n        // For some unknown reason, Edge browser does not support Golang WASM module.\r\n        // ... oh well!\r\n        if (!!WebAssembly && \"Go\" in global && typeof global.Go === 'function') {\r\n            // Golang dependencies are available!\r\n            super()\r\n        } else {\r\n            // Required dependencies not available!\r\n            throw new Error(\"Cannot initialize Go application!\")\r\n        }\r\n    }\r\n\r\n    async run() {\r\n        let go\r\n        if (!this.go) {\r\n            go = new window.Go();\r\n            this.go = go\r\n        } else {\r\n            go = this.go\r\n        }\r\n\r\n        return WebAssembly.instantiateStreaming(fetch(\"main.wasm\"), go.importObject).then((result) => {\r\n            GOContext.instance = result.instance\r\n            go.run(GOContext.instance);\r\n        });\r\n    }\r\n\r\n    async inflateTable() {\r\n        return window.golangInflateTable()\r\n    }\r\n\r\n    async getPrimes() {\r\n        return global.golangGetPrimes()\r\n    }\r\n\r\n    async setPrimeCount(count) {\r\n        let counter = global.golangSetPrimeCount(count)\r\n        console.log(counter, \"Go res\")\r\n        return counter\r\n    }\r\n\r\n    stop() {\r\n        if (!this.go.exited) {\r\n            global.golangShutdown()\r\n            GOContext.instance = null\r\n            this.go.exit(0)\r\n        }\r\n    }\r\n}","export class Prime {\r\n    primeCount = 10\r\n    primes = null\r\n\r\n    constructor(count) {\r\n        this.primeCount = count\r\n        // create global instance.\r\n        // Ideally, this should be placed in a separate npm package.\r\n        // However, since the worker file dependent on this class will not be processed by webpack, this should be sufficient.\r\n        // \r\n        // An alternative is passing the instance to the worker.\r\n        global.primeInstance = this\r\n    }\r\n\r\n    /**\r\n     * Use this function without passing any argument.\r\n     * \r\n     * @param {number} count Number of primes to be generated.\r\n     * @param {number[]} arrayList Array containing primes generated.\r\n     * @param {number} current Current number being tested as a prime.\r\n     */\r\n    async generatePrimes(count, arrayList, current) {\r\n        // console.log('gen args: ', arguments)\r\n        arrayList = arrayList || []\r\n        count = count || this.primeCount\r\n        current = current || 2\r\n        if (Number.MAX_SAFE_INTEGER < (current + 2)) throw new Error(\"Possible stackoverflow!\")\r\n        \r\n        if (this.primeChecker({ number: current })) arrayList.push(current)\r\n\r\n        if (arrayList.length < count) {\r\n            return this.generatePrimes(count, arrayList, ++current)\r\n        } else {\r\n            this.primes = arrayList\r\n            return arrayList\r\n        }\r\n    }\r\n\r\n    /**\r\n     * Checks if the provided number is a prime recursively.\r\n     * \r\n     * This uses object reference to reduce posible increase in stack size.\r\n     * \r\n     * **NOTE:** does not work with negative numbers.\r\n     */\r\n    primeChecker(obj) {\r\n        if (obj.currentCount) {\r\n            if (obj.currentCount <= obj.squareRt) {\r\n                if (obj.number % obj.currentCount === 0 || obj.number % (obj.currentCount + 2) === 0) return false\r\n                else {\r\n                    obj.currentCount++\r\n                    return this.primeChecker(obj)\r\n                }\r\n            } else {\r\n                // Looped through all values less than equal to square root, yet no divisor found.\r\n                // Number is prime!\r\n                return true\r\n            }\r\n        }\r\n\r\n        if (obj.number <= 3) return obj.number > 1\r\n        else if (obj.number % 2 === 0 || obj.number % 3 === 0) return false\r\n\r\n        obj.squareRt = parseInt(Math.sqrt(obj.number))\r\n        // Start testing from 5 as 4 has been seived out in earlier statement.\r\n        // This is the only modified property in `obj`.\r\n        //\r\n        // `obj` should be reused across invocation as JS objects are references.\r\n        obj.currentCount = 5\r\n\r\n        return this.primeChecker(obj)\r\n    }\r\n\r\n    /**\r\n     * Creates 2D array containing prime products.\r\n     * \r\n     * @param {function} callback Callback to be triggered for every loop.\r\n     * @param {number[]} primes Array containing optional mock array. If absent, the object will use internal array list.\r\n     */\r\n    async createTable(callback, primes) {\r\n        this.primes = primes || this.primes || this.generatePrimes()\r\n\r\n        if (!this.primes || typeof this.primes !== 'object') {\r\n            throw new Error(\"Primes not available to work with!\")\r\n        }\r\n\r\n        let result = []\r\n        this.primes.forEach((entry, y) => {\r\n            result.push([...this._tableGenerator(y, callback)])\r\n        })\r\n        return result\r\n    }\r\n\r\n    /**\r\n     * Given an index, this generates a list of products between this index and other numbers.\r\n     * \r\n     * @param {number[]} index Current index to be multiplied.\r\n     * @param {function} callback Function called after each calculation.\r\n     */\r\n    *_tableGenerator(index, callback) {\r\n        if (!this.primes || typeof this.primes !== 'object') {\r\n            throw new Error(\"Primes not available to work with!\")\r\n        }\r\n\r\n        for (let i = 0; i < this.primes.length; i++) {\r\n            const result = this.primes[index] * this.primes[i]\r\n            callback(i, index, result)\r\n            yield result\r\n        }\r\n    }\r\n}","module.exports = __webpack_public_path__ + \"static/media/logo.5d5d9eef.svg\";","import React from 'react'\r\n\r\n/**\r\n * Table generates a representation for a 2D numeric array.\r\n * The rows and columns should be the same size.\r\n * \r\n * All cells in this table will be identified by it cartesian coordinates.\r\n * \r\n * @param {*} param0 Parameters\r\n */\r\nexport const Table = ({ headers, callback }) => {\r\n    // const [state, setState] = React.useState({})\r\n\r\n    return (\r\n        <div className=\"table\">\r\n            <table>\r\n                <thead>\r\n                    <tr><th>.</th>\r\n                        {headers.map((v, x) => {\r\n                            return (\r\n                                <th key={`head-${x}`}>{v}</th>\r\n                            )\r\n                        })}\r\n                    </tr>\r\n                </thead>\r\n                <tbody>\r\n                    {headers.map((v, y) => {\r\n                        return (\r\n                            <tr key={`body-${y}-${v}`}>\r\n                                <th>{v}</th>\r\n                                {[...generateRow(y, headers.length)]}\r\n                            </tr>\r\n                        )\r\n                    })}\r\n                </tbody>\r\n            </table>\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction* generateRow(y, count) {\r\n    for (let i = 0; i < count; i++) {\r\n        yield (\r\n            <td id={`x${i}y${y}`} key={`x${i}y${y}`}></td>\r\n        )\r\n    }\r\n}","import React from 'react';\nimport logo from './logo.svg';\nimport './App.css';\nimport { Table } from './components/table';\nimport { JSContext, GOContext } from './lib/context';\nimport { withToastManager } from 'react-toast-notifications';\n\nconst ContextType = {\n  WEBASSEMBLY: 1,\n  JAVASCRIPT: 2,\n  WEBWORKER: 3\n}\n\n/**\n * Main entry for application.\n * \n * Broser feature detection is handled here.\n * The logic within may be pushed into a `React.Context` object if required.\n * \n * ... not today!\n */\nclass App extends React.PureComponent {\n  /**\n   * Cache for holding already created context objects when switching context types.\n   */\n  contextCache = {\n    JS: null,\n    GO: null\n  }\n\n  state = {\n    // user JavaScript engine by default for computation.\n    engine: ContextType.JAVASCRIPT,\n    context: new JSContext(),\n    primes: [],\n    status: \"Prime Counter generates a specified amount of prime numbers and calculates the product, displaying results in a table. You can select between the JavaScript or WebAssembly engine.\"\n  }\n\n  async componentDidMount() {\n    this.setState({ primes: await this.state.context.getPrimes() })\n  }\n\n  // checkContext(type, expected) {\n  //   if (type & expected !== 0) {\n  //     return true\n  //   }\n  //   return false\n  // }\n\n  existsInCache(type) {\n    switch (type) {\n      case ContextType.JAVASCRIPT:\n        if (this.contextCache.JS) {\n          this.contextCache.JS.run()\n          return this.contextCache.JS\n        }\n        break;\n      case ContextType.WEBASSEMBLY:\n        if (this.contextCache.GO) {\n          this.contextCache.GO.run()\n          return this.contextCache.GO\n        }\n        break;\n      default:\n        return false\n    }\n  }\n\n  getOldOrMakeNew(type) {\n    switch (type) {\n      case ContextType.JAVASCRIPT:\n        return this.existsInCache(ContextType.JAVASCRIPT) || new JSContext()\n      case ContextType.WEBASSEMBLY:\n        return this.existsInCache(ContextType.WEBASSEMBLY) || new GOContext()\n      case ContextType.WEBWORKER:\n        return this.existsInCache(ContextType.WEBWORKER)\n\n      default:\n        throw new Error(\"Dunno how you got here JS. Please report bug!!!!!\")\n    }\n  }\n\n  setContextType(type) {\n    const old = { type: this.state.engine, context: this.state.context }\n    let saveToCache = true\n    if (old.type === type) {\n      saveToCache = false\n      console.log('...resetting context...')\n    }\n\n    switch (old.type) {\n      case ContextType.JAVASCRIPT:\n        this.state.context.stop()\n        if (saveToCache) this.contextCache.JS = this.state.context\n        break;\n      case ContextType.WEBASSEMBLY:\n        this.state.context.stop()\n        if (saveToCache) this.contextCache.GO = this.state.context\n        break;\n      case ContextType.WEBWORKER:\n        throw new Error(\"Not yet implemented!\")\n      default:\n        throw new Error(\"Dunno how you got here JS. Please report bug!!!!!\")\n    }\n\n    try {\n      const cached = this.getOldOrMakeNew(type)\n      this.setState({ engine: type, context: cached })\n    } catch (e) {\n      console.error(e)\n      this.setState({ status: e.message })\n      // recover from failure by using last known good configuration.\n      this.setContextType(old.type)\n    }\n  }\n\n\n  render() {\n    const { toastManager } = this.props\n\n\n    return (\n      <div className=\"App\" >\n        <header>\n          <select className=\"select\" value={this.state.engine} onChange={e => {\n            toastManager.add(`Updating context engine...`, {\n              appearance: 'info',\n              autoDismiss: true\n            })\n            this.setContextType(parseInt(e.target.value))\n          }}>\n            <option value={ContextType.JAVASCRIPT}>JAVASCRIPT</option>\n            <option value={ContextType.WEBASSEMBLY}>WEBASSEMBLY</option>\n          </select>\n\n          <form className='textbox' onSubmit={async e => {\n            e.preventDefault()\n            e.stopPropagation()\n\n            this.setState({ primes: await this.state.context.setPrimeCount(parseInt(document.getElementById('primeCountInput').value, 10)) }, () => toastManager.add('Updated Prime Count!', {\n              appearance: 'success',\n              autoDismiss: true\n            }))\n          }}>\n            <input id='primeCountInput' type='number' placeholder=\"Set Prime number count...\" />\n          </form>\n        </header>\n        <main>\n\n          <div className='table-container'>\n            <Table headers={this.state.primes || []} />\n          </div>\n\n          <button className=\"button\" onClick={() => {\n            const startId = toastManager.add(\"Inflating table...\", { appearance: 'info' })\n            this.state.context.inflateTable().then(() => {\n              toastManager.remove(startId)\n              toastManager.add('Finished updating table!', { appearance: 'success', autoDismiss: true })\n            })\n          }}>Inflate Table</button>\n\n          <div>\n            <p id='status'>{this.state.status}</p>\n          </div>\n        </main>\n        <address><p>&copy; eikcalb, {(new Date()).getFullYear()}</p></address>\n      </div >\n    );\n  }\n}\n\nexport default withToastManager(App);\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport { ToastProvider } from 'react-toast-notifications';\n\n\nif (!WebAssembly.instantiateStreaming) { // polyfill for instantiating WASM\n    WebAssembly.instantiateStreaming = async (resp, importObject) => {\n        const source = await (await resp).arrayBuffer();\n        return await WebAssembly.instantiate(source, importObject);\n    };\n}\n\n\nReactDOM.render(<ToastProvider placement=\"bottom-center\"><App /></ToastProvider>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}